# SPDX-FileCopyrightText: 2023 Ross Patterson <me@rpatterson.net>
#
# SPDX-License-Identifier: MIT

# Common configuration shared between services:

x-volume-checkout-service: &volume-checkout-service
  type: "volume"
  source: "checkout"
  target: "/usr/local/src/project-structure"

x-service: &service
  user: "${PUID:-1000}:${PGID:-${PUID:-1000}}"
  environment:
    TZ: "${TZ:-Etc/UTC}"
  volumes:
    - <<: *volume-checkout-service
  working_dir: "/usr/local/src/project-structure${WORKTREE_REL:-}"

x-service-linter: &service-linter
  <<: *service
  profiles:
    - "lint"

x-service-releaser: &service-releaser
  <<: *service
  profiles:
    - "release"

# Override `$ docker compose` configuration for development or testing here in this
# repository checkout. Put everything used outside this checkout in
# `./compose.yml`.
services:
  # Configuration specific to development:
  project-structure:
    image: "${DOCKER_NAMESPACE:-merpatterson}/project-structure\
      :user-${DOCKER_VARIANT:-debian}-${DOCKER_BRANCH_TAG:-develop}"
    container_name: "project-structure-checkout"
    build: &service-build
      context: "./"
      target: "user"
      args:
        BUILDKIT_INLINE_CACHE: "1"
        VERSION: "${VERSION:-}"
      cache_from:
        - "${DOCKER_NAMESPACE:-merpatterson}/project-structure\
          :user-${DOCKER_VARIANT:-debian}-${DOCKER_BRANCH_TAG:-develop}"

  ## Contianers used for development and release:

  # Container for use by developers:
  project-structure-devel:
    extends:
      file: "./compose.yml"
      service: "project-structure"
    image: "${DOCKER_NAMESPACE:-merpatterson}/project-structure\
      :devel-${DOCKER_VARIANT:-debian}-${DOCKER_BRANCH_TAG:-develop}"
    container_name: "project-structure-devel"
    profiles:
      - "devel"
    build:
      <<: *service-build
      target: "devel"
      cache_from:
        - "${DOCKER_NAMESPACE:-merpatterson}/project-structure\
          :devel-${DOCKER_VARIANT:-debian}-${DOCKER_BRANCH_TAG:-develop}"
    environment:
      # Continue parallel make inside the container:
      MAKEFLAGS: "${MAKEFLAGS:-}"
      MAKE_RUN_UUID: "${MAKE_RUN_UUID:-}"
      # Variables from the environment to pass through into the container:
      CI: "${CI:-false}"
      # DEBUG: "true"
    volumes:
      # Reflect local changes inside the container:
      - "${CHECKOUT_DIR:-.}${WORKTREE_REL:-}/bin/entrypoint.sh\
        :/usr/local/bin/entrypoint.sh"
      - <<: *volume-checkout-service
      # Avoid any clashes between image variants and the local host at both build and
      # runtime.
      - "${CHECKOUT_DIR:-.}${WORKTREE_REL:-}/var-docker/${DOCKER_VARIANT:-debian}/\
        :/usr/local/src/project-structure${WORKTREE_REL:-}/var/"
    working_dir: "/usr/local/src/project-structure${WORKTREE_REL:-}"

  reuse:
    <<: *service-linter
    image: "docker.io/fsfe/reuse${DOCKER_REUSE_DIGEST:-:latest-debian}"
    command: >-
      lint

  # https://github.com/hadolint/hadolint#how-to-use
  hadolint:
    <<: *service-linter
    # For this and other development tools in container images, define the image tag to
    # follow when upgrading as the default and `./.env` controls the specific digest
    # used currently:
    image: "ghcr.io/hadolint/hadolint${DOCKER_HADOLINT_DIGEST:-:latest-debian}"
    command: >-
      hadolint "./build-host/Dockerfile"

  vale:
    <<: *service-linter
    image: "docker.io/jdkato/vale${DOCKER_VALE_DIGEST:-:latest}"
    command: >-
      .

  pandoc:
    <<: *service-releaser
    image: "docker.io/pandoc/core${DOCKER_PANDOC_DIGEST:-:latest-ubuntu}"
    entrypoint: "ash"
    # Strip reStructuredText directives unsupported in Markdown before converting, for
    # example table of contents, and converted Markdown that isn't widely supported, for
    # example tables:
    command: >-
      -xeu -c '
      grep -Ev "^ *\.\. +(contents)::.*" "./README.rst" |
      pandoc -f "rst" -t "gfm" | grep -Ev "^(\+-+\+|\|.*\|)$" >"./README.md"
      '

  docker-pushrm:
    <<: *service-releaser
    image: "chko/docker-pushrm${DOCKER_DOCKER_PUSHRM_DIGEST:-:latest}"
    depends_on:
      pandoc:
        condition: "service_completed_successfully"
    environment:
      DOCKER_USER: "${DOCKER_USER:-}"
      DOCKER_PASS: "${DOCKER_PASS:-}"
    command: >-
      --file "./var/README.md"
      --short "Project structure foundation or template"
      --debug "${DOCKER_USER:-}/project-structure"

  gitlab-release-cli:
    <<: *service-releaser
    image: "\
      registry.gitlab.com/gitlab-org/release-cli\
      ${DOCKER_GITLAB_RELEASE_CLI_DIGEST:-:latest}"
    environment:
      CI_JOB_TOKEN: "${CI_JOB_TOKEN:-}"

  ## Containers for simulating CI/CD:

  build-host:
    <<: *service
    image: "${DOCKER_NAMESPACE:-merpatterson}/project-structure:build-host"
    profiles:
      - "ci"
    build:
      context: "./build-host/"
      args:
        BUILDKIT_INLINE_CACHE: "1"
        USER_SIGNINGKEY: "${USER_SIGNINGKEY:-}"
      cache_from:
        - "${DOCKER_NAMESPACE:-merpatterson}/project-structure:build-host"
    privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - <<: *volume-checkout-service
      - "${CHECKOUT_DIR:-.}${WORKTREE_REL:-}/build-host/bin/init-job.sh\
        :/usr/local/bin/init-job.sh"
      - "${CHECKOUT_DIR:-.}${WORKTREE_REL:-}/build-host/bin/entrypoint.sh\
        :/usr/local/bin/entrypoint.sh"
      # Share local authentication inside the container:
      - "~/.ssh/:/home/runner/.ssh/"
      - "${SSH_AUTH_SOCK:-/run/user/${PUID:-1000}/ssh/agent.socket}\
        :${SSH_AUTH_SOCK:-/run/user/${PUID:-1000}/ssh/agent.socket}"
      - "~/.gnupg/:/home/runner/.gnupg/"
      - "/run/user/${PUID:-1000}/gnupg/S.gpg-agent:/home/runner/.gnupg/S.gpg-agent"
      - "~/.docker/:/home/runner/.docker/"
    env_file: "./.env"
    environment:
      PUID: "${PUID:-1000}"
      PGID: "${DOCKER_GID:-${PGID:-${PUID:-1000}}}"
      SSH_AUTH_SOCK: "${SSH_AUTH_SOCK:-/run/user/${PUID:-1000}/ssh/agent.socket}"
      # Pass the bind volume source paths along as seen from the host `# dockerd`:
      CHECKOUT_DIR: "${CHECKOUT_DIR:-.}"
      WORKTREE_REL: "${WORKTREE_REL:-}"
      # DEBUG: "true"
    user: "0:0"
    command: >-
      make -j -O release-all

volumes:
  checkout:
    name: "project_structure_checkout"
    driver: "local"
    driver_opts:
      type: "none"
      o: "bind"
      device: "${CHECKOUT_DIR:-.}/"
